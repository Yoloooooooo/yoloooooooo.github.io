[{"title":"RabbitMQ的安装","date":"2016-12-21T08:26:56.000Z","path":"2016/12/21/RabbitMQ的安装/","text":"1.安装CentOS 72.CentOS7默认不能上网12$ vi /etc/sysconfig/network-scripts/ifcfg // 将 ONBOOT=&quot;no&quot; 改成yes$ reboot 3.安装ifconfig工具1$ yum install -y net-tools 4.开启telnet123456$ yum install -y telnet-server$ yum install -y telnet$ systemctl enable xinetd.service$ systemctl enable telnet.socket$ systemctl start telnet.socket$ systemctl start xinetd 5.安装erlang1$ rpm -Uvh http://www.rabbitmq.com/releases/erlang/erlang-18.1-1.el7.centos.x86_64.rpm 安装好之后用 erl 命令检查，halt().退出 6.安装rabbitMQ12345$ rpm -Uvh http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-3.6.1-1.noarch.rpm$ rpm -qa|grep rabbitmq // 查看安装是否成功$ service rabbitmq-server start // 开启rabbitmq-server服务$ rabbitmqctl status // 查看rabbitmq状态$ chkconfig rabbit-server on // 设置开机自动启动服务 7.安装web管理插件12$ rabbitmq-plugins enable rabbitmq_management$ service rabbitmq-server restart 此时本地会访问不了 http://ip:15672/, 原因是CentOS7 开启了firewalld防火墙，需要关闭，正式环境可以安装iptables防火墙，关闭firewalld, 参考文章12$ systemctl stop firewalld.service$ systemctl disable firewalld.service 8.增加rabbitmq用户默认guest用户只能访问http://localhost:15672/ ,再创建一个用户远程访问123$ rabbitmqctl add_user username password$ rabbitmqctl set_user_tags username administrator$ rabbitmqctl list_users // 查看rabbitmq所有用户","tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"http://localhost:4000/tags/RabbitMQ/"}]},{"title":"Docker相关概念整理","date":"2016-12-21T08:08:11.000Z","path":"2016/12/21/Docker相关概念整理/","text":"Docker有什么好处 标准化应用发布，docker容器包含了运行环境和可执行程序，可以跨平台和主机使用； 节约时间，快速部署和启动，VM启动一般是分钟级，docker容器启动是秒级； 方便构建基于SOA架构或微服务架构的系统，通过服务编排，更好的松耦合； 节约成本，以前一个虚拟机至少需要几个G的磁盘空间，docker容器可以减少到MB级； 方便持续集成，通过与代码进行关联使持续集成非常方便； 可以作为集群系统的轻量主机或节点，在IaaS平台上，已经出现了CaaS，通过容器替代原来的主机。 什么是虚拟化技术虚拟化技术技术做个比喻来说就好比你有套房子，然后把里面隔成很多小的单间来出租，因此通常可以提供房屋利用率，获得更好的收益。从技术角度讲，虚拟化就是在一台主机上运行多个相互隔离的实例。这儿里面包含两层意思，一是相互隔离，即彼此之间没有影响；二是实例，可以是一个完整的操作系统，比如windows, linux系统，也可以是可执行的程序。 Docker容器和Docker镜像的区别Docker镜像假设Linux内核是第0层，那么无论怎么运行Docker，它都是运行于内核层之上的。这个Docker镜像，是一个只读的镜像，位于第1层，它不能被修改或不能保存状态。一个Docker镜像可以构建于另一个Docker镜像之上，这种层叠关系可以是多层的。第1层的镜像层我们称之为基础镜像（Base Image），其他层的镜像（除了最顶层）我们称之为父层镜像（Parent Image）。这些镜像继承了他们的父层镜像的所有属性和设置，并在Dockerfile中添加了自己的配置。Docker镜像通过镜像ID进行识别。镜像ID是一个64字符的十六进制的字符串。但是当我们运行镜像时，通常我们不会使用镜像ID来引用镜像，而是使用镜像名来引用。镜像可以发布为不同的版本，这种机制我们称之为标签（Tag）。 Docker容器它会在所有的镜像层之上增加一个可写层。这个可写层有运行在CPU上的进程，而且有两个不同的状态：运行态（Running）和退出态（Exited）。这就是Docker容器。当我们使用docker run启动容器，Docker容器就进入运行态，当我们停止Docker容器时，它就进入退出态。 当我们有一个正在运行的Docker容器时，从运行态到停止态，我们对它所做的一切变更都会永久地写到容器的文件系统中。要切记，对容器的变更是写入到容器的文件系统的，而不是写入到Docker镜像中的。 我们可以用同一个镜像启动多个Docker容器，这些容器启动后都是活动的，彼此还是相互隔离的。我们对其中一个容器所做的变更只会局限于那个容器本身。 如果对容器的底层镜像进行修改，那么当前正在运行的容器是不受影响的，不会发生自动更新现象。 如果想更新容器到其镜像的新版本，那么必须当心，确保我们是以正确的方式构建了数据结构，否则我们可能会导致损失容器中所有数据的后果。 64字符的十六进制的字符串来定义容器ID，它是容器的唯一标识符。容器之间的交互是依靠容器ID识别的，由于容器ID的字符太长，我们通常只需键入容器ID的前4个字符即可。当然，我们还可以使用容器名，但显然用4字符的容器ID更为简便。 Docker是否安全Docker本身是共享操作系统的进程，不存在不安全一说，如果Docker不安全，那么所有的linux程序都是不安全的，而目前全球基本上90%以上的网站都是运行在linux上的。Docker本身是容器技术的一种，所谓容器就像一个盒子，我们只对暴露需要暴露的端口，比如一个网站就只暴露80端口。而传统的服务器和云主机，基本是开放了所有的端口，或者是大多数端口，这种暴露其实是很危险的，因此Docker反而会让系统更安全可靠。 容器有哪些网络模式 None - 在该模式下容器没有对外网络，本机只有一个回路地址。 Container - 与另一个容器共享网络。 Host - 与主机共享网络 Bridge - Docker 默认的网络模式，在这种模式下，Docker 容器与外部的通信都是通过 iptable 来实现的。 Overlay - Docker 目前原生的跨主机多子网模型，主要是通过 vxlan 技术来实现的。 容器如何进行持久化容器在退出后并不会更改镜像。所以，如果希望保存容器中的数据，就需要通过 commit 来保存成镜像。 另外，用户可以使用 Volume来实现数据持久化存储，保存在容器中产生或使用的文件。容器可以把数据写在 Volume 上，Volume 可以在不同的容器之间共享和重用数据，而且容器数据的备份、恢复和迁移都可以通过 Volume 实现。 Dockerfile书写的最佳实践是什么 通过Dockerfile所构建的镜像应该越精简越好； 尽量不要安装非必要的软件包； 一个容器只运行一个单独的实例，将具有耦合度的应用分别安装到不同的容器里面； 慎重引入新的数据层； 将准备安装的软件包安装字母顺序排列。这样可以回避重复安装软件包的情况，同时也有助于进行软件更新。通过添加”\\”分割命令，可以增强代码的可读性； 用官方提供的镜像版本作为基础镜像，减小镜像的体积； 将多条RUN 命令使用”/“连接起来，这样更易于理解，可以方便维护； 为镜像定义一个比较通用的端口，比如一个用来提供Apache web服务的镜像，最好是暴露80端口； Dockerfile开头的几句指令应该固定下来，不要每次都随意更改，这样可以利用缓存； 通过-t标记来构建镜像，有助于用户管理每个创建的镜像； 不要在Dockerfile中映射公有端口； 使用CMD和ENTRYPOINT时，一定要用数组语法，而且CMD和ENTRYPOINT 结合使用更好； 不要开机初始化； 在push之前，在本地先构建一下，确保在本地构建的镜像在任何地方都可以正常运行； 不要在构建中升级版本，如果更新时试图修改 init 或改变容器的内容，更新可能会失败，还可能会产生不一致的镜像； FROM命令应该包含基础镜像的完整仓库名和标签； 使用指令组合，比如apt-get update应该与apt-get install组合。","tags":[{"name":"Docker","slug":"Docker","permalink":"http://localhost:4000/tags/Docker/"}]},{"title":"Hexo + GitHub 搭建个人博客(Mac版)","date":"2016-12-20T13:56:28.000Z","path":"2016/12/20/Hexo-GitHub-搭建个人博客-Mac版/","text":"前言一直以来都想搭建一个属于自己独立的博客，记录一些自己技术成长过程中的点点滴滴，同时也希望记录一些自己生活中对大家有帮助的生活经历。这次！！！终于打破了自己懒惰的心理，动笔开工啦~~~~第一篇博客就从如何搭建自己的博客开始吧! 搭建前的准备 Node.js： 用来创建hexo博客框架用的。 Git客户端：用来把本地的hexo内容提交到github上去的。 GitHub账号：用来发布自己本地搭建的博客，供外界访问。 安装Node.js首先Mac上需要安装homebrew。打开终端，将下列代码粘贴进去执行即可：1$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 然后用brew安装node.js，如下命令：1$ brew install node 安装Git从网站直接下载Mac版的git安装即可。 安装Hexo安装前先介绍hexo几个常用命令1234hexo g 完整命令为hexo generate,用于生成静态文件hexo s 完整命令为hexo server,用来启动服务器，主要用来本地预览hexo d 完整命令为hexo deploy,用来将本地文件发布到github上hexo n 完整命令为hexo new,用来新建一篇文章此处输入代码 全局安装hexo1$ sudo npm install -g hexo 安装效果如下所示// TODO 插入图片 初始化博客资源文件夹终端cd进入一个你选定的目录，然后执行hexo init 文件名1$ hexo init KevinBlog 初始化后目录如下所示// TODO 插入图片进入刚刚创建的文件夹下（例如我这是KevinBolg），执行下列命令安装npm1$ npm install 以上全部命令执行成功后，即可以执行下列命令启动本地hexo服务器了1$ hexo s 此时，在浏览器地址栏输入 http://localhost:4000 即可看到自己的博客首页啦// TODO 插入图片 关联GitHub以上都是一些搭建博客的本地设置，启动服务后，也只能在本地访问。若要发布到公网供外界访问，就必须关联自己的GitHub账号了。 创建仓库登入你的GitHub账号，新建仓库，固定写法为：用户名.github.io。如yoloooooooo.github.io，如下如所示：// TODO 插入图片 终端cd进入之前创建的本地博客资源文件夹，以下命令全在该目录下执行。用vim命令编辑_config.yml这个文件1$ vim _config.yml 打开后往下滚动到最后，修改成如下的样子(备注：每个冒号后面都要加个空格，否则执行hexo命令时会报错！！！)1234deploy: type: git repository: https://github.com/yoloooooooo/yoloooooooo.github.io.git branch: master 执行生成静态页面的命令1$ hexo g 执行配置命令1$ hexo d 若未关联GitHub，执行hexo d命令时，终端会提示你输入GitHub的用户名和密码。即：12Username for &apos;https://github.com&apos;:Password for &apos;https://github.com&apos;: hexo d 命令执行成功后，在浏览器地址栏输入http://yoloooooooo.github.io (将yoloooooooo换成你自己的用户名）能看到和你之前输入http://localhost:4000 一样的效果。 添加ssh key到GitHub检查GitHub中是否存在ssh key执行如下命令1$ ls -al ~/.ssh 如果有文件id_rsa.pub或id_dsa.pub，则直接将SSH key添加到Github中，否则生成新的ssh key。 生成新的ssh key执行如下命令生成public/private rsa key pair，注意将your_email@example.com换成你自己注册GitHub的邮箱地址。1$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。 将ssh key添加到GitHub中打开id_rsa.pub文件，将这些信息(即ssh key)复制到Github的Add SSH key页面即可。 发布文章执行下列命令新建文章1$ hexo n &apos;HelloBlog&apos; 这样，博客资源文件夹目录/source/_posts下就会生成一个名为HelloBlog.md的文件。这里你可以使用markdown在线编辑器来编写你的文章内容了。文件编辑完后，执行下列命令来发布这篇文章：1$ hexo g // 生成静态页面 1$ hexo d // 将文章部署到GitHub 自此，Mac上搭建基于Hexo + GitHub的博客就完成了。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://localhost:4000/tags/随笔/"}]},{"title":"Linux下MySQL的安装(rpm安装包方式)","date":"2016-05-30T23:41:06.000Z","path":"2016/05/31/Linux下MySQL的安装-rpm安装包方式/","text":"下载rpm安装包点击我下载有五个包(红色部分为安装所必须的)： MySQL-client-5.6.19-1.el6.x86_64.rpm 客户端包 MySQL-devel-5.6.19-1.el6.x86_64.rpm 开发包 MySQL-server-5.6.19-1.el6.x86_64.rpm 服务端包 MySQL-shared-compat-5.6.19-1.el6.x86_64.rpm 与低版本兼容的共享库 MySQL-shared-5.6.19-1.el6.x86_64.rpm 共享库 安装perl和libaio执行以下脚本安装perl、libaio1$ yum -y install perl libaio 执行rpm安装包123$ rpm -ivh MySQL-server-5.6.19-1.el6.x86_64.rpm$ rpm -ivh MySQL-devel-5.6.19-1.el6.x86_64.rpm$ rpm -ivh MySQL-client-5.6.19-1.el6.x86_64.rpm 备注：安装过程中可能会报与系统中现有的包冲突，直接卸载即可：# rpm -e —-nodeps [要卸载的包名] 配置MySQL 首先启动MySQL服务，检查是否安装成功 1$ service mysql start // 若出现Starting MySql. Success 则说明安装成功 修改root用户密码(或者执行/usr/bin/mysql_secure_installation，建议生产环境中做此操作)，默认的密码在/root/.mysql_secret中。 12$ mysql -uroot -pIzvyCZfIrs5VJw4 // 登入$ mysql&gt; SET PASSWORD=PASSWORD(&apos;ztesoft123&apos;) // 修改密码 更改MySQL数据目录(先停止MySQL服务)，安装之后，默认的数据文件存储目录为/var/lib/mysql/ 1$ cp -a /var/lib/mysql /ztesoft/mysql_data/ 注意：（-a这个参数一定要带着，否则复制过去的权限就不对了。） 修改my.cnf配置文件。rpm包安装的MySQL是不会安装/etc/my.cnf文件的，解决方法，只需要复制/usr/share/mysql目录下的my-default.cnf(注：5.5版本时会有多个.cnf文件，比如my-huge.cnf、my-large.cnf、my-small.cnf、my-medium.cnf、my-innodb-heavy-4G.cnf)文件到/etc目录，并改名为my.cnf即可12$ cp /usr/share/mysql/my-default.cnf /etc/my.cnf$ vi /etc/my.cnf 修改 datadir=/ztesoft/mysql_data/mysql修改 socket = /ztesoft/mysql_data/mysql/mysql.sock建立一个mysql.sock的链接:1$ ln -s /ztesoft/mysql_data/mysql/mysql.sock /var/lib/mysql/mysql.sock 设置MySQL数据目录的属主关系 12$ chown -R mysql:mysql /ztesoft/mysql_data$ chmod -R 755 /ztesoft/mysql_data 重启MySQL服务 配置MySQL远程访问,处于安全考虑，Mysql默认是不允许远程访问的，可以使用下面开启远程访问12mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; identified by &apos;ztesoft&apos;;mysql&gt;FLUSH PRIVILEGES 把MySQL的3306端口加入到防火墙中1$ /sbin/iptables -I INPUT -ptcp --dport 3306 -j ACCEPT 至此，MySQL安装成功！！！","tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://localhost:4000/tags/MySQL/"},{"name":"数据库","slug":"数据库","permalink":"http://localhost:4000/tags/数据库/"}]}]